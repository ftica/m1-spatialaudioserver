// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "postgresql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "foreignKeys"
}

enum Role {
  ADMIN
  USER
}

model User {
  id        String                 @db.Uuid @id @default(uuid())
  username  String                 @unique
  password  String                 @db.VarChar(255)
  email     String                 @unique
  role      Role                   @default(USER)
  lastSeen  DateTime?
  playlists Playlist[]
  favorites Favorite[]
  shared    PlaylistAcessControl[]

  @@map("user")
}

model Track {
  id         String    @db.Uuid @id @default(uuid())
  name       String
  filename   String    @unique
  position   Int?
  playlistId String?   @db.Uuid @map("playlist")
  playlist   Playlist? @relation(references: [id], fields: [playlistId], map: "fk_track_playlist")
  uploaded   Boolean   @default(false)

  @@unique([playlistId, position])
  @@map("track")
}

model Playlist {
  id        String                 @db.Uuid @id @default(uuid())
  name      String
  isPublic  Boolean                @default(false)
  ownerId   String                 @db.Uuid @map("owner")
  owner     User                   @relation(references: [id], onDelete: Cascade, fields: [ownerId], map: "fk_playlist_owner")
  tracks    Track[]
  favorites Favorite[]
  users     PlaylistAcessControl[]

  @@map("playlist")
}

model Favorite {
  userId     String   @db.Uuid @map("user")
  playlistId String   @db.Uuid @map("playlist")
  user       User     @relation(references: [id], onDelete: Cascade, fields: [userId], map: "fk_favorite_user")
  playlist   Playlist @relation(references: [id], onDelete: Cascade, fields: [playlistId], map: "fk_favorite_playlist")

  @@id([userId, playlistId])
  @@map("favorite")
}

model PlaylistAcessControl {
  userId     String   @db.Uuid @map("user")
  playlistId String   @db.Uuid @map("playlist")
  user       User     @relation(references: [id], onDelete: Cascade, fields: [userId], map: "fk_playlist_access_control_user")
  playlist   Playlist @relation(references: [id], onDelete: Cascade, fields: [playlistId], map: "fk_playlist_access_control_playlist")

  @@id([userId, playlistId])
  @@map("playlist_access_control")
}
