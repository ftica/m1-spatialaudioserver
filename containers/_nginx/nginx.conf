daemon off;

error_log /dev/stdout info;

user nginx;

events {
  worker_connections 1024;
}

rtmp {
  server {
    listen ${STREAM_PORT};

    chunk_size 4000;
    notify_method get;

    application live {
      live on;
      exec /usr/local/bin/ffmpeg -analyzeduration 10M -i rtmp://127.0.0.1/live/$name -strict -2 -c:a libopus -mapping_family 255 -f dash /opt/data/dash/$name.mpd 2>>/tmp/nginx_rtmp_ffmpeg_log;
    }
  }
}

http {
  lua_package_path "/usr/local/luajit/lib/lua/?.lua;;";
  lua_shared_dict tuslock 10m;

  init_by_lua_block {
    require "resty.core"
    collectgarbage("collect") -- just to collect any garbage
  }
  init_worker_by_lua_block {
    local uuid = require 'resty.jit-uuid'
    uuid.seed() -- this fixing perfomance issue for generating uuid
  }

  include /etc/nginx/mime.types;

  types {
		# add support for wasm MIME type, that is required by specification and it is not part of default mime.types file
		application/wasm wasm;
	}
  default_type application/octet-stream;

  server {
    access_log /dev/stdout combined;

    listen ${HTTP_PORT};

    vod_mode local;
    aio on;

    add_header Cache-Control no-cache;
    add_header Access-Control-Allow-Origin $http_origin always;
    add_header Access-Control-Expose-Headers Content-Length;

    # note: disable live broadcasting
    # location /dash/live {
    #   types {
    #     application/dash+xml mpd;
    #     video/mp4 mp4;
    #   }
    #   root /opt/data;
    # }
    #

    location ~ ^/dash/static/(.*)/(.+)$ {
      set $track_id $1;
      set $dash_part $2;

      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Credentials true always;

      auth_request /_track;

      types {
        application/dash+xml mpd;
        video/mp4 mp4;
      }
      alias /share/sound/preload/$1/$2;
    }

    location / {
      root /www;

      index  index.html;

      try_files $uri $uri/ /index.html;
    }

    location /api/ {
      client_max_body_size 1m;

      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header Host $host;

      # fixme: need to restrict CORS policy
      proxy_hide_header Access-Control-Allow-Origin;
      add_header Access-Control-Allow-Origin $http_origin always;

      proxy_pass http://m1-api:3000/v1/;
    }

    location ^~/api/upload {
      client_max_body_size 10m;

      charset utf-8;
      charset_types application/json;
      default_type application/json;

      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Credentials true always;
      add_header Access-Control-Allow-Headers 'Content-Type,Tus-Resumable,Upload-Length,Upload-Metadata,Upload-Offset' always;
      add_header Access-Control-Allow-Methods 'GET,POST,HEAD,PATCH' always;
      add_header Access-Control-Expose-Headers 'Location,Upload-Offset' always;

      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Headers 'Content-Type,Tus-Resumable,Upload-Length,Upload-Metadata,Upload-Offset' always;
        add_header Access-Control-Allow-Methods 'GET,POST,HEAD,PATCH' always;
        add_header Access-Control-Expose-Headers 'Location,Upload-Offset' always;
        return 204;
      }

      auth_request /_auth;

      content_by_lua_file /etc/nginx/uploader.lua;
    }

    location = /api/reload {
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Credentials true always;
      add_header Access-Control-Allow-Methods 'GET' always;

      auth_request /_auth;

      content_by_lua_block {
        os.execute("rm -rf " .. "/share/sound/" .. ngx.var.arg_id)

        command = "/etc/nginx/switcher.sh " .. ngx.var.arg_name .. " " .. ngx.var.arg_id
        local handle = io.popen(command, "r")

        local output = handle:read('*a')
        local _, exit, status = handle:close()

        ngx.status = ngx.HTTP_NO_CONTENT
      }
    }

    location = /_auth {
      internal;
      # note: set the same size as upload route
      client_max_body_size 10m;

      proxy_set_header Host $host;
      proxy_set_header Content-Length "";
      proxy_pass_request_body off;

      proxy_pass http://m1-api:3000/v1/auth/validate;
    }

    location = /_track {
      internal;

      proxy_set_header Host $host;
      proxy_set_header Content-Length "";
      proxy_pass_request_body off;

      proxy_pass http://m1-api:3000/v1/tracks/$track_id?part=$dash_part;
    }
  }
}
